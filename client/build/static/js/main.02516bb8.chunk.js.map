{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","spamTickets","setSpamTickets","ticket","a","axios","post","status","map","elem","state","Error","id","put","filter","get","spamTix","data","elements","useEffect","getTickets","className","idx","payload","reportType","message","onClick","blockTicket","resolveTicket","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAuHeA,MAlHf,WAEE,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAFa,4CAIb,WAA2BC,GAA3B,SAAAC,EAAA,+EAG2BC,IAAMC,KAAK,8BAA+BH,GAHrE,OAK4B,MAL5B,OAKiBI,QACXL,EAAeD,EAAYO,KAAI,SAACC,GAE9B,OAAIA,IAASN,EAAgBM,EACpBA,IAASN,GAChBM,EAAKC,MAAQ,UACND,QAFJ,MATb,sDAqBY,IAAIE,MAAM,0BArBtB,0DAJa,kEA+Bb,WAA6BR,EAAQS,GAArC,SAAAR,EAAA,+EAG6BC,IAAMQ,IAAN,wCAA2CD,IAHxE,OAK8B,MAL9B,OAKmBL,QAEbL,EAAeD,EAAYa,QAAO,SAACL,GAAD,OAAUA,IAASN,MAP3D,sDAYY,IAAIQ,MAAM,4BAZtB,0DA/Ba,kEAkDb,4BAAAP,EAAA,+EAG8BC,IAAMU,IAAI,sFAHxC,OAGcC,EAHd,OAKQd,EAAec,EAAQC,KAAKC,UALpC,sDASc,IAAIP,MAAM,yBATxB,0DAlDa,sBAuEb,OAPAQ,qBAAU,YAhEG,mCAkEXC,KAEC,IAKD,mCACE,sBAAKC,UAAU,WAAf,UACE,yCAEA,qBAAKA,UAAU,wBAAf,SACKpB,EAAYO,KAAI,SAACC,EAAMa,GAEtB,OAEE,sBAAeD,UAAU,mBAAzB,UAEM,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,UAAf,iBAA8BZ,EAAKG,MACnC,sBAAKS,UAAU,UAAf,oBAAiCZ,EAAKC,YAGxC,sBAAKW,UAAU,oBAAf,UACE,sBAAKA,UAAU,UAAf,mBAAgCZ,EAAKc,QAAQC,cAC7C,sBAAKH,UAAU,UAAf,sBAAmCZ,EAAKc,QAAQE,cAGlD,sBAAKJ,UAAU,mBAAf,UACE,wBAAQK,QAAS,kBA/F1B,2CA+FiCC,CAAYlB,IAApC,mBACA,wBAAQiB,QAAS,kBAhG1B,6CAgGiCE,CAAcnB,EAAMA,EAAKG,KAAjD,0BAdEU,cC3EXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.02516bb8.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios';\n\n\nfunction App() {\n\n  const [spamTickets, setSpamTickets] = useState([]);\n\n  async function blockTicket(ticket) {\n\n    try {\n      const blockTix = await axios.post(\"http://localhost:5000/block\", ticket )\n\n      if (blockTix.status === 200) {\n        setSpamTickets(spamTickets.map((elem) => {\n         \n          if (elem !== ticket) {return elem}\n          else if (elem === ticket) {\n            elem.state = 'BLOCKED'\n            return elem\n          }\n          \n          }))\n\n        \n      }\n\n  }\n    catch (e) {\n        throw new Error('Unable to Block Ticket');\n    }\n\n  }\n\n\n  async function resolveTicket(ticket, id) {\n\n    try {\n      const resolveTix = await axios.put(`http://localhost:5000/reports/${id}`)\n\n      if (resolveTix.status === 200) {\n      \n        setSpamTickets(spamTickets.filter((elem) => elem !== ticket))\n      }\n\n  }\n    catch (e) {\n        throw new Error('Unable to Resolve Ticket');\n    }\n  }\n\n\n \n  \n  async function getTickets() {\n\n      try {\n          const spamTix = await axios.get(\"https://raw.githubusercontent.com/morkro/coding-challenge/master/data/reports.json\")\n          \n          setSpamTickets(spamTix.data.elements);\n        \n      }\n      catch (e) {\n          throw new Error('Unable to get tickets');\n      }\n  }\n\n\n  useEffect(() => {\n\n    getTickets()\n\n  }, [])\n\n  //\n  return (\n\n    <>\n      <div className='mainbody'>\n        <h1>Reports</h1>\n\n        <div className='tickets-maincontainer'>\n            {spamTickets.map((elem, idx) => {\n\n              return (\n\n                <div key={idx} className=\"ticket-container\">\n\n                      <div className='idstate-container' >\n                        <div className='infodiv'>Id: {elem.id}</div>\n                        <div className='infodiv'>State: {elem.state}</div>\n                      </div>\n\n                      <div className='typemsg-container'>\n                        <div className='infodiv'>Type: {elem.payload.reportType}</div>\n                        <div className='infodiv'>Message: {elem.payload.message}</div>\n                      </div>\n\n                      <div className='button-container'>\n                        <button onClick={() => (blockTicket(elem))}>Block</button>\n                        <button onClick={() => (resolveTicket(elem, elem.id))}>Resolve</button>\n                      </div>\n                </div>\n\n\n              )\n            })}\n           \n        </div>\n\n      </div>\n     \n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}